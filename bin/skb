#!/usr/bin/env ruby
require 'gli'
require 'skb'
require 'psych'
require 'logger'
require 'parallel'

# Config file settings
config = Skb::Config.new

# Logging
logger = Logger.new(STDOUT)

# Command suite Settings
include GLI::App

program_desc 'Command line interface to the App Guarden SBK'

version Skb::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'location of the SKB file store'
arg_name 'DIR'
flag [:l, :location]

desc 'config file path'
arg_name 'skbrc.yaml'
default_value config.path
flag [:c, :config]

desc 'Adds an app to the SKB'
arg_name 'APK [APKs]'
command :add do |c|
  c.desc %q|Symlink the app rather than copying it into the database|
  c.switch [:s, :symlink]

  c.action do |_global, options, args|
    Skb::AddCommand.new(config.config.merge(options), args).execute
  end
end

desc 'UNIMPLEMENTED'
arg_name 'Describe arguments to check here'
command :check do |c|
  c.action do |_global, _options, _args|
    puts 'check command ran'
  end
end

desc 'Fetch data about an app'
arg_name <<-EOF
  ID
EOF
command :fetch do |c|
  c.desc 'List available data fetchers'
  c.switch [:l, :list]

  c.desc 'Which metadata to fetch'
  c.flag [:k, :kind]

  c.desc 'Fetch metadata'
  c.switch [:m, :metadata]

  c.desc 'Don\'t output results, just fetch the data'
  c.switch [:q, :quiet]

  c.desc 'Overwrite existing results'
  c.switch [:overwrite]

  c.desc 'Run on all known apps rather than a specific one'
  c.switch [:a, :all]

  c.desc 'Run in paralllel'
  c.switch [:p, :parallel]

  c.action do |_global, options, args|
    if options[:metadata] then kind = MetaFetcher else kind = ResultFetcher end
    if options[:list] then kind.constants.each {|mf| puts mf.to_s } end

    if options[:all] then \
      args = Dir[File.join config.location, "*"] \
      .map { |f| File.basename f }
    end

    unless options[:kind].nil?
      fetcher = kind.const_get options[:kind]

      if options[:parallel]
        Parallel.map(args, progress: 'running') do |arg|
          fetcher.new File.join(config.location, arg)
        end
      else
        args.each do |arg|
          fetched = fetcher.new \
            File.join(config.location, arg),
            overwrite: options[:overwrite] == true

          unless options[:quiet]
            begin
              puts fetched.to_s
              puts ""
            rescue => e
              logger.error e.message
            end
          end
        end
      end
    end
  end
end

desc 'Dump the skb into a different format'
arg_name <<-EOF
  FORMAT
EOF
command :dump do |c|
  c.action do |_global, _options, args|
    Skb::DumpSecPALCommand.new(config, args).execute
  end
end

pre do |global, _command, _options, _args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  config = Skb::Config.new(global[:config]) if global[:config]
  config.config['location'] = global[:location] if global[:location]

  unless Dir.exist? config.location
    fail "SBK hasn't been created at '#{config.location}'"
  end

  # Load metafetchers
  Dir['./metafetchers/*.rb'].each do |f|
    require f
  end

  # Load resultfetchers
  Dir['./resultfetchers/*.rb'].each do |f|
    require f
  end

  true
end

post do |_global, _command, _options, _args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  exception.backtrace.each { |line| puts line }
  puts config.path
  puts config.config
  true
end

exit run(ARGV)
