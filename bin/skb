#!/usr/bin/env ruby
require 'gli'
require 'skb'
require 'psych'
require 'logger'

# Config file settings
config = Skb::Config.new

# Logging
logger = Logger.new(STDOUT)

# Command suite Settings
include GLI::App

program_desc 'Command line interface to the App Guarden SBK'

version Skb::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'location of the SKB file store'
arg_name 'DIR'
flag [:l, :location]

desc 'config file path'
arg_name 'skbrc.yaml'
default_value config.path
flag [:c, :config]

desc 'Adds an app to the SKB'
arg_name 'APK [APKs]'
command :add do |c|
  c.action do |_global, _options, args|
    Skb::AddCommand.new(config, args).execute
  end
end

desc 'UNIMPLEMENTED'
arg_name 'Describe arguments to check here'
command :check do |c|
  c.action do |_global, _options, _args|
    puts 'check command ran'
  end
end

desc 'Run checking utilities on an app'
arg_name 'ID' 
command :run do |c|
  c.desc 'List available app checkers'
  c.switch [:l, :list]

  c.desc 'Which checker to run'
  c.flag [:k, :kind]

  c.action do |_global, options, args|
    if options[:list] then ResultFetcher.constants.each {|mf| puts mf.to_s } end

    unless options[:kind].nil?
      fetcher = ResultFetcher.const_get options[:kind]
      args.each do |arg|
        fetched = fetcher.new File.join(config.location, arg)
        puts fetched.to_s
      end
    end
  end
end

desc 'Fetch metadata about an app'
arg_name <<-EOF
  ID 
EOF
command :fetch do |c|
  c.desc 'List available metadata fetchers'
  c.switch [:l, :list]

  c.desc 'Which metadata to fetch'
  c.flag [:k, :kind]

  c.desc 'Don\'t output results, just fetch the data'
  c.flag [:q, :quiet]

  c.action do |_global, options, args|
    if options[:list] then MetaFetcher.constants.each {|mf| puts mf.to_s } end

    unless options[:kind].nil?
      fetcher = MetaFetcher.const_get options[:kind]
      args.each do |arg|
        fetched = fetcher.new File.join(config.location, arg)

        unless options[:quiet]
          begin
            puts fetched.to_s 
            puts ""
          rescue => e
            logger.error e.message
          end
        end
      end
    end
  end
end

pre do |global, _command, _options, _args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  config = Skb::Config.new(global[:config]) if global[:config]
  config.config['location'] = global[:location] if global[:location]

  unless Dir.exist? config.location
    fail "SBK hasn't been created at '#{config.location}'"
  end

  # Load metafetchers
  Dir['./metafetchers/*.rb'].each do |f| 
    require f
  end

  # Load resultfetchers
  Dir['./resultfetchers/*.rb'].each do |f|
    require f
  end

  true
end

post do |_global, _command, _options, _args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  exception.backtrace.each { |line| puts line }
  puts config.path
  puts config.config
  true
end

exit run(ARGV)
